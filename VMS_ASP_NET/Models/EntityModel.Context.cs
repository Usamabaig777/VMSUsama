//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VMS_ASP_NET.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.Entity.ModelConfiguration.Conventions;

    public class VMSFarhanEntities : DbContext
    {
        public VMSFarhanEntities()
            : base("name=VMSFarhanEntities")
        {
        }
        
        //public virtual DbSet<C__EFMigrationsHistory> C__EFMigrationsHistory { get; set; }
        public /*virtual*/ DbSet<Color> Color { get; set; }
        public /*virtual*/ DbSet<Company> Companie { get; set; }
        public /*virtual*/ DbSet<Destination> Destination { get; set; }
        public /*virtual*/ DbSet<Gate> Gate { get; set; }
        public /*virtual*/ DbSet<IncidentReport> IncidentReport { get; set; }
        public /*virtual*/ DbSet<IncidentReportAttachment> IncidentReportAttachment { get; set; }
        public /*virtual*/ DbSet<IncidentType> IncidentType { get; set; }
        public /*virtual*/ DbSet<Notification> Notification { get; set; }
        public /*virtual*/ DbSet<Privilege> Privilege { get; set; }
        public /*virtual*/ DbSet<RolePrivilege> RolePrivilege { get; set; }
        public /*virtual*/ DbSet<Role> Role { get; set; }
        public /*virtual*/ DbSet<Site> Site { get; set; }
        public /*virtual*/ DbSet<StateProvince> StateProvince { get; set; }
        public /*virtual*/ DbSet<sysdiagram> sysdiagram { get; set; }
        public /*virtual*/ DbSet<Trailer> Trailer { get; set; }
        public /*virtual*/ DbSet<TrailerAttachment> TrailerAttachment { get; set; }
        public /*virtual*/ DbSet<TrailerType> TrailerType { get; set; }
        public /*virtual*/ DbSet<UserNotification> UserNotification { get; set; }
        public /*virtual*/ DbSet<UserRole> UserRole { get; set; }
        public /*virtual*/ DbSet<User> User { get; set; }
        public /*virtual*/ DbSet<Vehicle> Vehicle { get; set; }
        public /*virtual*/ DbSet<VehicleMake> VehicleMake { get; set; }
        public /*virtual*/ DbSet<VehicleType> VehicleType { get; set; }
        public /*virtual*/ DbSet<VisitDetail> VisitDetail { get; set; }
        public /*virtual*/ DbSet<VisitMain> VisitMain { get; set; }
        public /*virtual*/ DbSet<Visitor> Visitor { get; set; }
        public /*virtual*/ DbSet<VisitorNotification> VisitorNotification { get; set; }
        public /*virtual*/ DbSet<VisitorStatu> VisitorStatu { get; set; }
        public /*virtual*/ DbSet<VisitorType> VisitorType { get; set; }
        public /*virtual*/ DbSet<VisitorVehicle> VisitorVehicle { get; set; }
        public /*virtual*/ DbSet<VMSErrorLog> VMSErrorLog { get; set; }
        public /*virtual*/ DbSet<Environment> Environment { get; set; }
        public /*virtual*/ DbSet<IncidentReportType> IncidentReportType { get; set; }


        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
        }
        [DbFunction("VMSFarhanEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));

            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[VMSFarhanEntities].[Split](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }

        public virtual ObjectResult<ap_DasboardMetrics_Result> ap_DasboardMetrics(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ap_DasboardMetrics_Result>("ap_DasboardMetrics", siteIDParameter);
        }

        public virtual int CreateIncidentReport(Nullable<int> siteID, Nullable<int> userID, string incidentLocation, string incidentDescription, string securityOfficerName, string shift, string primaryInvolvedPerson, string driverLicenseNo, string companyName, string address, string telephone, Nullable<System.DateTime> birthDate, string supervisorName, string vehicleMake, string vehicleModel, string vehicleLicensePlateNo, Nullable<int> vehicleStateID, Nullable<int> trailerAttachmentID, string trailerLicensePlateNo, string trailerVIN, Nullable<int> trailerStateID, Nullable<byte> currentlyInsured, string policyNumber, string workSite, string vendor, string siteType, string status, string disposition, Nullable<bool> signature, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, string notes, string supervisorPhoneNumber, string incidentDateTime)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            var incidentLocationParameter = incidentLocation != null ?
                new ObjectParameter("IncidentLocation", incidentLocation) :
                new ObjectParameter("IncidentLocation", typeof(string));

            var incidentDescriptionParameter = incidentDescription != null ?
                new ObjectParameter("IncidentDescription", incidentDescription) :
                new ObjectParameter("IncidentDescription", typeof(string));

            var securityOfficerNameParameter = securityOfficerName != null ?
                new ObjectParameter("SecurityOfficerName", securityOfficerName) :
                new ObjectParameter("SecurityOfficerName", typeof(string));

            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));

            var primaryInvolvedPersonParameter = primaryInvolvedPerson != null ?
                new ObjectParameter("PrimaryInvolvedPerson", primaryInvolvedPerson) :
                new ObjectParameter("PrimaryInvolvedPerson", typeof(string));

            var driverLicenseNoParameter = driverLicenseNo != null ?
                new ObjectParameter("DriverLicenseNo", driverLicenseNo) :
                new ObjectParameter("DriverLicenseNo", typeof(string));

            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));

            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));

            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));

            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));

            var supervisorNameParameter = supervisorName != null ?
                new ObjectParameter("SupervisorName", supervisorName) :
                new ObjectParameter("SupervisorName", typeof(string));

            var vehicleMakeParameter = vehicleMake != null ?
                new ObjectParameter("VehicleMake", vehicleMake) :
                new ObjectParameter("VehicleMake", typeof(string));

            var vehicleModelParameter = vehicleModel != null ?
                new ObjectParameter("VehicleModel", vehicleModel) :
                new ObjectParameter("VehicleModel", typeof(string));

            var vehicleLicensePlateNoParameter = vehicleLicensePlateNo != null ?
                new ObjectParameter("VehicleLicensePlateNo", vehicleLicensePlateNo) :
                new ObjectParameter("VehicleLicensePlateNo", typeof(string));

            var vehicleStateIDParameter = vehicleStateID.HasValue ?
                new ObjectParameter("VehicleStateID", vehicleStateID) :
                new ObjectParameter("VehicleStateID", typeof(int));

            var trailerAttachmentIDParameter = trailerAttachmentID.HasValue ?
                new ObjectParameter("TrailerAttachmentID", trailerAttachmentID) :
                new ObjectParameter("TrailerAttachmentID", typeof(int));

            var trailerLicensePlateNoParameter = trailerLicensePlateNo != null ?
                new ObjectParameter("TrailerLicensePlateNo", trailerLicensePlateNo) :
                new ObjectParameter("TrailerLicensePlateNo", typeof(string));

            var trailerVINParameter = trailerVIN != null ?
                new ObjectParameter("TrailerVIN", trailerVIN) :
                new ObjectParameter("TrailerVIN", typeof(string));

            var trailerStateIDParameter = trailerStateID.HasValue ?
                new ObjectParameter("TrailerStateID", trailerStateID) :
                new ObjectParameter("TrailerStateID", typeof(int));

            var currentlyInsuredParameter = currentlyInsured.HasValue ?
                new ObjectParameter("CurrentlyInsured", currentlyInsured) :
                new ObjectParameter("CurrentlyInsured", typeof(byte));

            var policyNumberParameter = policyNumber != null ?
                new ObjectParameter("PolicyNumber", policyNumber) :
                new ObjectParameter("PolicyNumber", typeof(string));

            var workSiteParameter = workSite != null ?
                new ObjectParameter("WorkSite", workSite) :
                new ObjectParameter("WorkSite", typeof(string));

            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));

            var siteTypeParameter = siteType != null ?
                new ObjectParameter("SiteType", siteType) :
                new ObjectParameter("SiteType", typeof(string));

            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));

            var dispositionParameter = disposition != null ?
                new ObjectParameter("Disposition", disposition) :
                new ObjectParameter("Disposition", typeof(string));

            var signatureParameter = signature.HasValue ?
                new ObjectParameter("Signature", signature) :
                new ObjectParameter("Signature", typeof(bool));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));

            var supervisorPhoneNumberParameter = supervisorPhoneNumber != null ?
                new ObjectParameter("SupervisorPhoneNumber", supervisorPhoneNumber) :
                new ObjectParameter("SupervisorPhoneNumber", typeof(string));

            var incidentDateTimeParameter = incidentDateTime != null ?
                new ObjectParameter("IncidentDateTime", incidentDateTime) :
                new ObjectParameter("IncidentDateTime", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateIncidentReport", siteIDParameter, userIDParameter, incidentLocationParameter, incidentDescriptionParameter, securityOfficerNameParameter, shiftParameter, primaryInvolvedPersonParameter, driverLicenseNoParameter, companyNameParameter, addressParameter, telephoneParameter, birthDateParameter, supervisorNameParameter, vehicleMakeParameter, vehicleModelParameter, vehicleLicensePlateNoParameter, vehicleStateIDParameter, trailerAttachmentIDParameter, trailerLicensePlateNoParameter, trailerVINParameter, trailerStateIDParameter, currentlyInsuredParameter, policyNumberParameter, workSiteParameter, vendorParameter, siteTypeParameter, statusParameter, dispositionParameter, signatureParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter, notesParameter, supervisorPhoneNumberParameter, incidentDateTimeParameter);
        }

        public virtual ObjectResult<GetAllIncidentType_Result> GetAllIncidentType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllIncidentType_Result>("GetAllIncidentType");
        }

        public virtual ObjectResult<GetUser_Result> GetUser(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));

            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", userNameParameter, passwordParameter);
        }

        public virtual ObjectResult<Rpt_CreateOperationalReports_Result> Rpt_CreateOperationalReports(string visitorFirstName, string visitorLastName, string visitorSSN, Nullable<int> siteID, Nullable<int> gateID, Nullable<int> guardID, string company, string licensePlateNo, Nullable<int> makeID, Nullable<int> vehicleColorID, string modelName, Nullable<int> daysCount, Nullable<System.DateTime> startDateTime, Nullable<System.DateTime> endDateTime, Nullable<int> reportType)
        {
            var visitorFirstNameParameter = visitorFirstName != null ?
                new ObjectParameter("VisitorFirstName", visitorFirstName) :
                new ObjectParameter("VisitorFirstName", typeof(string));

            var visitorLastNameParameter = visitorLastName != null ?
                new ObjectParameter("VisitorLastName", visitorLastName) :
                new ObjectParameter("VisitorLastName", typeof(string));

            var visitorSSNParameter = visitorSSN != null ?
                new ObjectParameter("VisitorSSN", visitorSSN) :
                new ObjectParameter("VisitorSSN", typeof(string));

            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var gateIDParameter = gateID.HasValue ?
                new ObjectParameter("GateID", gateID) :
                new ObjectParameter("GateID", typeof(int));

            var guardIDParameter = guardID.HasValue ?
                new ObjectParameter("GuardID", guardID) :
                new ObjectParameter("GuardID", typeof(int));

            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));

            var licensePlateNoParameter = licensePlateNo != null ?
                new ObjectParameter("LicensePlateNo", licensePlateNo) :
                new ObjectParameter("LicensePlateNo", typeof(string));

            var makeIDParameter = makeID.HasValue ?
                new ObjectParameter("MakeID", makeID) :
                new ObjectParameter("MakeID", typeof(int));

            var vehicleColorIDParameter = vehicleColorID.HasValue ?
                new ObjectParameter("VehicleColorID", vehicleColorID) :
                new ObjectParameter("VehicleColorID", typeof(int));

            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));

            var daysCountParameter = daysCount.HasValue ?
                new ObjectParameter("DaysCount", daysCount) :
                new ObjectParameter("DaysCount", typeof(int));

            var startDateTimeParameter = startDateTime.HasValue ?
                new ObjectParameter("StartDateTime", startDateTime) :
                new ObjectParameter("StartDateTime", typeof(System.DateTime));

            var endDateTimeParameter = endDateTime.HasValue ?
                new ObjectParameter("EndDateTime", endDateTime) :
                new ObjectParameter("EndDateTime", typeof(System.DateTime));

            var reportTypeParameter = reportType.HasValue ?
                new ObjectParameter("ReportType", reportType) :
                new ObjectParameter("ReportType", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rpt_CreateOperationalReports_Result>("Rpt_CreateOperationalReports", visitorFirstNameParameter, visitorLastNameParameter, visitorSSNParameter, siteIDParameter, gateIDParameter, guardIDParameter, companyParameter, licensePlateNoParameter, makeIDParameter, vehicleColorIDParameter, modelNameParameter, daysCountParameter, startDateTimeParameter, endDateTimeParameter, reportTypeParameter);
        }

        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));

            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }

        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));

            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }

        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }

        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }

        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }

        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));

            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));

            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }

        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }

        public virtual ObjectResult<usp_AuthenticateUser_Result> usp_AuthenticateUser(string userName, string userPassword)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));

            var userPasswordParameter = userPassword != null ?
                new ObjectParameter("UserPassword", userPassword) :
                new ObjectParameter("UserPassword", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AuthenticateUser_Result>("usp_AuthenticateUser", userNameParameter, userPasswordParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreateColor(string colorName, string colorCode, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var colorNameParameter = colorName != null ?
                new ObjectParameter("ColorName", colorName) :
                new ObjectParameter("ColorName", typeof(string));

            var colorCodeParameter = colorCode != null ?
                new ObjectParameter("ColorCode", colorCode) :
                new ObjectParameter("ColorCode", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreateColor", colorNameParameter, colorCodeParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual int usp_CreateCommandParameter(string table, string @object)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));

            var objectParameter = @object != null ?
                new ObjectParameter("Object", @object) :
                new ObjectParameter("Object", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateCommandParameter", tableParameter, objectParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreateCompany(string companyName, string address, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));

            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreateCompany", companyNameParameter, addressParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<usp_CreateGate_Result> usp_CreateGate(Nullable<int> siteID, string gateDescription, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var gateDescriptionParameter = gateDescription != null ?
                new ObjectParameter("GateDescription", gateDescription) :
                new ObjectParameter("GateDescription", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateGate_Result>("usp_CreateGate", siteIDParameter, gateDescriptionParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual int usp_CreateInsertCommandColumns(string table)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateInsertCommandColumns", tableParameter);
        }

        public virtual int usp_CreateInsertParameter(string table)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateInsertParameter", tableParameter);
        }

        public virtual int usp_CreateModelClass(string table)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateModelClass", tableParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreatePrivilege(string privilegeName, string privilegeDescription, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var privilegeNameParameter = privilegeName != null ?
                new ObjectParameter("PrivilegeName", privilegeName) :
                new ObjectParameter("PrivilegeName", typeof(string));

            var privilegeDescriptionParameter = privilegeDescription != null ?
                new ObjectParameter("PrivilegeDescription", privilegeDescription) :
                new ObjectParameter("PrivilegeDescription", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreatePrivilege", privilegeNameParameter, privilegeDescriptionParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual int usp_CreatePrivilegSeeder(string permissionList)
        {
            var permissionListParameter = permissionList != null ?
                new ObjectParameter("permissionList", permissionList) :
                new ObjectParameter("permissionList", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreatePrivilegSeeder", permissionListParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreateRolePrivilege(Nullable<int> roleID, Nullable<int> userID, string privilegeIDs)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            var privilegeIDsParameter = privilegeIDs != null ?
                new ObjectParameter("PrivilegeIDs", privilegeIDs) :
                new ObjectParameter("PrivilegeIDs", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreateRolePrivilege", roleIDParameter, userIDParameter, privilegeIDsParameter);
        }

        public virtual int usp_CreateRoleSeeder(string rolelist)
        {
            var rolelistParameter = rolelist != null ?
                new ObjectParameter("rolelist", rolelist) :
                new ObjectParameter("rolelist", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateRoleSeeder", rolelistParameter);
        }

        public virtual ObjectResult<usp_CreateSite_Result> usp_CreateSite(Nullable<int> companyID, string siteName, string siteDescription, string email, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));

            var siteDescriptionParameter = siteDescription != null ?
                new ObjectParameter("SiteDescription", siteDescription) :
                new ObjectParameter("SiteDescription", typeof(string));

            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateSite_Result>("usp_CreateSite", companyIDParameter, siteNameParameter, siteDescriptionParameter, emailParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<usp_CreateTrailer_Result> usp_CreateTrailer(Nullable<int> trailerAttachmentID, Nullable<int> trailerStateID, Nullable<int> trailerTypeID, string trailerPlateNo, string trailerVIN, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var trailerAttachmentIDParameter = trailerAttachmentID.HasValue ?
                new ObjectParameter("TrailerAttachmentID", trailerAttachmentID) :
                new ObjectParameter("TrailerAttachmentID", typeof(int));

            var trailerStateIDParameter = trailerStateID.HasValue ?
                new ObjectParameter("TrailerStateID", trailerStateID) :
                new ObjectParameter("TrailerStateID", typeof(int));

            var trailerTypeIDParameter = trailerTypeID.HasValue ?
                new ObjectParameter("TrailerTypeID", trailerTypeID) :
                new ObjectParameter("TrailerTypeID", typeof(int));

            var trailerPlateNoParameter = trailerPlateNo != null ?
                new ObjectParameter("TrailerPlateNo", trailerPlateNo) :
                new ObjectParameter("TrailerPlateNo", typeof(string));

            var trailerVINParameter = trailerVIN != null ?
                new ObjectParameter("TrailerVIN", trailerVIN) :
                new ObjectParameter("TrailerVIN", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateTrailer_Result>("usp_CreateTrailer", trailerAttachmentIDParameter, trailerStateIDParameter, trailerTypeIDParameter, trailerPlateNoParameter, trailerVINParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreateTrailerType(string trailerTypeDescription, Nullable<int> createdBy)
        {
            var trailerTypeDescriptionParameter = trailerTypeDescription != null ?
                new ObjectParameter("TrailerTypeDescription", trailerTypeDescription) :
                new ObjectParameter("TrailerTypeDescription", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreateTrailerType", trailerTypeDescriptionParameter, createdByParameter);
        }

        public virtual int usp_CreateUpdateParameter(string table)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateUpdateParameter", tableParameter);
        }

        public virtual ObjectResult<usp_CreateUser_Result> usp_CreateUser(string userName, string firstName, string lastName, string password, Nullable<int> siteID, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, Nullable<bool> isActive, Nullable<bool> isLogin, Nullable<bool> isExternal, Nullable<bool> isPasswordReset)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));

            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));

            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));

            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));

            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));

            var isLoginParameter = isLogin.HasValue ?
                new ObjectParameter("isLogin", isLogin) :
                new ObjectParameter("isLogin", typeof(bool));

            var isExternalParameter = isExternal.HasValue ?
                new ObjectParameter("isExternal", isExternal) :
                new ObjectParameter("isExternal", typeof(bool));

            var isPasswordResetParameter = isPasswordReset.HasValue ?
                new ObjectParameter("isPasswordReset", isPasswordReset) :
                new ObjectParameter("isPasswordReset", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateUser_Result>("usp_CreateUser", userNameParameter, firstNameParameter, lastNameParameter, passwordParameter, siteIDParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter, isActiveParameter, isLoginParameter, isExternalParameter, isPasswordResetParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreateUserRoles(Nullable<int> userID, string rolesID, Nullable<int> createdBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            var rolesIDParameter = rolesID != null ?
                new ObjectParameter("RolesID", rolesID) :
                new ObjectParameter("RolesID", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreateUserRoles", userIDParameter, rolesIDParameter, createdByParameter);
        }

        public virtual int usp_CreateUserSeeder(string userList)
        {
            var userListParameter = userList != null ?
                new ObjectParameter("userList", userList) :
                new ObjectParameter("userList", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateUserSeeder", userListParameter);
        }

        public virtual int usp_CreateVehicle(Nullable<int> vehicleTypeID, string licensePlateNo, Nullable<int> vehicleStateID, Nullable<int> makeID, string modelName, Nullable<int> vehicleColorID, string comments, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));

            var licensePlateNoParameter = licensePlateNo != null ?
                new ObjectParameter("LicensePlateNo", licensePlateNo) :
                new ObjectParameter("LicensePlateNo", typeof(string));

            var vehicleStateIDParameter = vehicleStateID.HasValue ?
                new ObjectParameter("VehicleStateID", vehicleStateID) :
                new ObjectParameter("VehicleStateID", typeof(int));

            var makeIDParameter = makeID.HasValue ?
                new ObjectParameter("MakeID", makeID) :
                new ObjectParameter("MakeID", typeof(int));

            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));

            var vehicleColorIDParameter = vehicleColorID.HasValue ?
                new ObjectParameter("VehicleColorID", vehicleColorID) :
                new ObjectParameter("VehicleColorID", typeof(int));

            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateVehicle", vehicleTypeIDParameter, licensePlateNoParameter, vehicleStateIDParameter, makeIDParameter, modelNameParameter, vehicleColorIDParameter, commentsParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreateVehicleMake(string makeName, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var makeNameParameter = makeName != null ?
                new ObjectParameter("MakeName", makeName) :
                new ObjectParameter("MakeName", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreateVehicleMake", makeNameParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreateVehicleType(string vehicleTypeName, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var vehicleTypeNameParameter = vehicleTypeName != null ?
                new ObjectParameter("VehicleTypeName", vehicleTypeName) :
                new ObjectParameter("VehicleTypeName", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreateVehicleType", vehicleTypeNameParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<usp_CreateVisitor_Result> usp_CreateVisitor(Nullable<int> siteID, string visitorSSN, string visitorFirstName, string visitorLastName, string visitorAddress, string visitorEmail, string company, string passNo, Nullable<int> visitorStatusID, Nullable<bool> visitorEntryExitNotification, string notificationEmailAddress, Nullable<int> createdBy)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var visitorSSNParameter = visitorSSN != null ?
                new ObjectParameter("VisitorSSN", visitorSSN) :
                new ObjectParameter("VisitorSSN", typeof(string));

            var visitorFirstNameParameter = visitorFirstName != null ?
                new ObjectParameter("VisitorFirstName", visitorFirstName) :
                new ObjectParameter("VisitorFirstName", typeof(string));

            var visitorLastNameParameter = visitorLastName != null ?
                new ObjectParameter("VisitorLastName", visitorLastName) :
                new ObjectParameter("VisitorLastName", typeof(string));

            var visitorAddressParameter = visitorAddress != null ?
                new ObjectParameter("VisitorAddress", visitorAddress) :
                new ObjectParameter("VisitorAddress", typeof(string));

            var visitorEmailParameter = visitorEmail != null ?
                new ObjectParameter("VisitorEmail", visitorEmail) :
                new ObjectParameter("VisitorEmail", typeof(string));

            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));

            var passNoParameter = passNo != null ?
                new ObjectParameter("PassNo", passNo) :
                new ObjectParameter("PassNo", typeof(string));

            var visitorStatusIDParameter = visitorStatusID.HasValue ?
                new ObjectParameter("VisitorStatusID", visitorStatusID) :
                new ObjectParameter("VisitorStatusID", typeof(int));

            var visitorEntryExitNotificationParameter = visitorEntryExitNotification.HasValue ?
                new ObjectParameter("VisitorEntryExitNotification", visitorEntryExitNotification) :
                new ObjectParameter("VisitorEntryExitNotification", typeof(bool));

            var notificationEmailAddressParameter = notificationEmailAddress != null ?
                new ObjectParameter("NotificationEmailAddress", notificationEmailAddress) :
                new ObjectParameter("NotificationEmailAddress", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CreateVisitor_Result>("usp_CreateVisitor", siteIDParameter, visitorSSNParameter, visitorFirstNameParameter, visitorLastNameParameter, visitorAddressParameter, visitorEmailParameter, companyParameter, passNoParameter, visitorStatusIDParameter, visitorEntryExitNotificationParameter, notificationEmailAddressParameter, createdByParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreateVisitorType(string visitorTypeDescription, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var visitorTypeDescriptionParameter = visitorTypeDescription != null ?
                new ObjectParameter("VisitorTypeDescription", visitorTypeDescription) :
                new ObjectParameter("VisitorTypeDescription", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreateVisitorType", visitorTypeDescriptionParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_CreatRole(Nullable<int> companyID, string roleName, string roleDescription, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));

            var roleDescriptionParameter = roleDescription != null ?
                new ObjectParameter("RoleDescription", roleDescription) :
                new ObjectParameter("RoleDescription", typeof(string));

            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));

            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_CreatRole", companyIDParameter, roleNameParameter, roleDescriptionParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_DeleteGate(Nullable<int> gateID, Nullable<int> siteID, Nullable<int> userID)
        {
            var gateIDParameter = gateID.HasValue ?
                new ObjectParameter("GateID", gateID) :
                new ObjectParameter("GateID", typeof(int));

            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_DeleteGate", gateIDParameter, siteIDParameter, userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllColors_Result> usp_GetAllColors(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllColors_Result>("usp_GetAllColors", userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllCompanies_Result> usp_GetAllCompanies(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllCompanies_Result>("usp_GetAllCompanies", siteIDParameter);
        }

        public virtual ObjectResult<usp_GetAllGates_Result> usp_GetAllGates(Nullable<int> siteID, Nullable<int> userID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllGates_Result>("usp_GetAllGates", siteIDParameter, userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllPermissions_Result> usp_GetAllPermissions(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllPermissions_Result>("usp_GetAllPermissions", userIdParameter);
        }

        public virtual ObjectResult<usp_GetAllRoles_Result> usp_GetAllRoles(Nullable<int> companyID, Nullable<int> userID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllRoles_Result>("usp_GetAllRoles", companyIDParameter, userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllSites_Result> usp_GetAllSites(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllSites_Result>("usp_GetAllSites", companyIDParameter);
        }

        public virtual ObjectResult<usp_GetAllTrailers_Result> usp_GetAllTrailers(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllTrailers_Result>("usp_GetAllTrailers", userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllTrailerTypes_Result> usp_GetAllTrailerTypes(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllTrailerTypes_Result>("usp_GetAllTrailerTypes", userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllUsers_Result> usp_GetAllUsers(Nullable<int> userID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllUsers_Result>("usp_GetAllUsers", userIDParameter, companyIDParameter);
        }

        public virtual ObjectResult<usp_GetAllVehicleMakes_Result> usp_GetAllVehicleMakes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllVehicleMakes_Result>("usp_GetAllVehicleMakes");
        }

        public virtual ObjectResult<usp_GetAllVehicles_Result> usp_GetAllVehicles(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllVehicles_Result>("usp_GetAllVehicles", userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllVehicleTypes_Result> usp_GetAllVehicleTypes(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllVehicleTypes_Result>("usp_GetAllVehicleTypes", userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllVisitors_Result> usp_GetAllVisitors(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllVisitors_Result>("usp_GetAllVisitors", userIDParameter);
        }

        public virtual ObjectResult<usp_GetAllVisitorTypes_Result> usp_GetAllVisitorTypes(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllVisitorTypes_Result>("usp_GetAllVisitorTypes", userIDParameter);
        }

        public virtual ObjectResult<usp_GetGateDetailsByUserID_Result> usp_GetGateDetailsByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGateDetailsByUserID_Result>("usp_GetGateDetailsByUserID", userIDParameter);
        }

        public virtual ObjectResult<usp_GetPermissionsByUserID_Result> usp_GetPermissionsByUserID(Nullable<int> cUserID, Nullable<int> userID)
        {
            var cUserIDParameter = cUserID.HasValue ?
                new ObjectParameter("CUserID", cUserID) :
                new ObjectParameter("CUserID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPermissionsByUserID_Result>("usp_GetPermissionsByUserID", cUserIDParameter, userIDParameter);
        }

        public virtual ObjectResult<usp_GetSiteGates_Result> usp_GetSiteGates(Nullable<int> siteID, Nullable<int> userID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSiteGates_Result>("usp_GetSiteGates", siteIDParameter, userIDParameter);
        }

        public virtual ObjectResult<usp_GetUserByUserID_Result> usp_GetUserByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserByUserID_Result>("usp_GetUserByUserID", userIDParameter);
        }

        public virtual ObjectResult<usp_GetVisitorDetailVisitorID_Result> usp_GetVisitorDetailVisitorID(Nullable<int> siteID, Nullable<int> visitorID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var visitorIDParameter = visitorID.HasValue ?
                new ObjectParameter("VisitorID", visitorID) :
                new ObjectParameter("VisitorID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVisitorDetailVisitorID_Result>("usp_GetVisitorDetailVisitorID", siteIDParameter, visitorIDParameter);
        }

        public virtual ObjectResult<usp_PrivilegesByRoleID_Result> usp_PrivilegesByRoleID(Nullable<int> roleID, Nullable<int> companyID, Nullable<int> userID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));

            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PrivilegesByRoleID_Result>("usp_PrivilegesByRoleID", roleIDParameter, companyIDParameter, userIDParameter);
        }

        public virtual ObjectResult<usp_RolesByUserID_Result> usp_RolesByUserID(Nullable<int> userID, Nullable<int> pID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            var pIDParameter = pID.HasValue ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(int));

            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RolesByUserID_Result>("usp_RolesByUserID", userIDParameter, pIDParameter, companyIDParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_SetPassword(string oldPassword, string newPassword, Nullable<int> userID)
        {
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));

            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_SetPassword", oldPasswordParameter, newPasswordParameter, userIDParameter);
        }

        public virtual int usp_SignOffUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SignOffUser", userIDParameter);
        }

        public virtual int usp_TableDataSet(string table, string @object)
        {
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));

            var objectParameter = @object != null ?
                new ObjectParameter("Object", @object) :
                new ObjectParameter("Object", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TableDataSet", tableParameter, objectParameter);
        }

        public virtual ObjectResult<usp_UpdateGate_Result> usp_UpdateGate(Nullable<int> gateID, Nullable<int> companyID, string gateDescription, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var gateIDParameter = gateID.HasValue ?
                new ObjectParameter("GateID", gateID) :
                new ObjectParameter("GateID", typeof(int));

            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            var gateDescriptionParameter = gateDescription != null ?
                new ObjectParameter("GateDescription", gateDescription) :
                new ObjectParameter("GateDescription", typeof(string));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UpdateGate_Result>("usp_UpdateGate", gateIDParameter, companyIDParameter, gateDescriptionParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<usp_UpdateSite_Result> usp_UpdateSite(Nullable<int> companyID, Nullable<int> userID, Nullable<int> siteID, string siteName, string siteDescription, string email, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var siteNameParameter = siteName != null ?
                new ObjectParameter("SiteName", siteName) :
                new ObjectParameter("SiteName", typeof(string));

            var siteDescriptionParameter = siteDescription != null ?
                new ObjectParameter("SiteDescription", siteDescription) :
                new ObjectParameter("SiteDescription", typeof(string));

            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UpdateSite_Result>("usp_UpdateSite", companyIDParameter, userIDParameter, siteIDParameter, siteNameParameter, siteDescriptionParameter, emailParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<usp_UpdateUser_Result> usp_UpdateUser(Nullable<int> userID, string userName, string firstName, string lastName, string password, Nullable<int> siteID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, Nullable<bool> isActive, Nullable<bool> isLogin, Nullable<bool> isExternal, Nullable<bool> isPasswordReset)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));

            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));

            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));

            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));

            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));

            var isLoginParameter = isLogin.HasValue ?
                new ObjectParameter("isLogin", isLogin) :
                new ObjectParameter("isLogin", typeof(bool));

            var isExternalParameter = isExternal.HasValue ?
                new ObjectParameter("isExternal", isExternal) :
                new ObjectParameter("isExternal", typeof(bool));

            var isPasswordResetParameter = isPasswordReset.HasValue ?
                new ObjectParameter("isPasswordReset", isPasswordReset) :
                new ObjectParameter("isPasswordReset", typeof(bool));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UpdateUser_Result>("usp_UpdateUser", userIDParameter, userNameParameter, firstNameParameter, lastNameParameter, passwordParameter, siteIDParameter, modifiedByParameter, modifiedOnParameter, isActiveParameter, isLoginParameter, isExternalParameter, isPasswordResetParameter);
        }

        public virtual ObjectResult<usp_VisitorActivityFeed_Result> usp_VisitorActivityFeed(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_VisitorActivityFeed_Result>("usp_VisitorActivityFeed", siteIDParameter);
        }

        public virtual ObjectResult<Nullable<int>> usp_VMSErrorLog(string message, string createdBy)
        {
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));

            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_VMSErrorLog", messageParameter, createdByParameter);
        }

        public virtual ObjectResult<vms_Android_GetVisitorDetailByVisitDetailID_Result> vms_Android_GetVisitorDetailByVisitDetailID(Nullable<int> visitDetailID)
        {
            var visitDetailIDParameter = visitDetailID.HasValue ?
                new ObjectParameter("VisitDetailID", visitDetailID) :
                new ObjectParameter("VisitDetailID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vms_Android_GetVisitorDetailByVisitDetailID_Result>("vms_Android_GetVisitorDetailByVisitDetailID", visitDetailIDParameter);
        }

        public virtual int vms_CleanBuggyData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("vms_CleanBuggyData");
        }

        public virtual ObjectResult<vms_GetAllCheckedInVisits_Result> vms_GetAllCheckedInVisits(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vms_GetAllCheckedInVisits_Result>("vms_GetAllCheckedInVisits", siteIDParameter);
        }

        public virtual ObjectResult<VMS_GetAllIncidentReports_Result> VMS_GetAllIncidentReports(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VMS_GetAllIncidentReports_Result>("VMS_GetAllIncidentReports", siteIDParameter);
        }

        public virtual ObjectResult<VMS_GetAllUsers_Result> VMS_GetAllUsers(Nullable<int> userID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));

            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VMS_GetAllUsers_Result>("VMS_GetAllUsers", userIDParameter, companyIDParameter);
        }

        public virtual ObjectResult<vms_GetSiteBySiteID_Result> vms_GetSiteBySiteID(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vms_GetSiteBySiteID_Result>("vms_GetSiteBySiteID", siteIDParameter);
        }

        public virtual ObjectResult<vms_getTodaysAllCheckoutsList_Result> vms_getTodaysAllCheckoutsList(Nullable<int> siteID)
        {
            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("SiteID", siteID) :
                new ObjectParameter("SiteID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vms_getTodaysAllCheckoutsList_Result>("vms_getTodaysAllCheckoutsList", siteIDParameter);
        }

        public virtual ObjectResult<vms_GetUserDetails_Result> vms_GetUserDetails(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vms_GetUserDetails_Result>("vms_GetUserDetails", userIDParameter);
        }

        public virtual ObjectResult<vms_UpdateUserSiteID_Result> vms_UpdateUserSiteID(Nullable<int> userID, Nullable<int> siteID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));

            var siteIDParameter = siteID.HasValue ?
                new ObjectParameter("siteID", siteID) :
                new ObjectParameter("siteID", typeof(int));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vms_UpdateUserSiteID_Result>("vms_UpdateUserSiteID", userIDParameter, siteIDParameter);
        }

        public virtual int vms_UpdateVehicle(Nullable<int> vehicleID, Nullable<int> vehicleTypeID, Nullable<int> vehicleStateID, Nullable<int> makeID, string modelName, Nullable<int> vehicleColorID, string comments, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));

            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));

            var vehicleStateIDParameter = vehicleStateID.HasValue ?
                new ObjectParameter("VehicleStateID", vehicleStateID) :
                new ObjectParameter("VehicleStateID", typeof(int));

            var makeIDParameter = makeID.HasValue ?
                new ObjectParameter("MakeID", makeID) :
                new ObjectParameter("MakeID", typeof(int));

            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));

            var vehicleColorIDParameter = vehicleColorID.HasValue ?
                new ObjectParameter("VehicleColorID", vehicleColorID) :
                new ObjectParameter("VehicleColorID", typeof(int));

            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("vms_UpdateVehicle", vehicleIDParameter, vehicleTypeIDParameter, vehicleStateIDParameter, makeIDParameter, modelNameParameter, vehicleColorIDParameter, commentsParameter, modifiedByParameter, modifiedOnParameter);
        }

        public virtual ObjectResult<vms_UpdateVehicleInformation_Result> vms_UpdateVehicleInformation(Nullable<int> vehicleID, Nullable<int> vehicleTypeID, string licensePlateNo, Nullable<int> vehicleStateID, Nullable<int> makeID, string modelName, Nullable<int> vehicleColorID, string comments, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn)
        {
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));

            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));

            var licensePlateNoParameter = licensePlateNo != null ?
                new ObjectParameter("LicensePlateNo", licensePlateNo) :
                new ObjectParameter("LicensePlateNo", typeof(string));

            var vehicleStateIDParameter = vehicleStateID.HasValue ?
                new ObjectParameter("VehicleStateID", vehicleStateID) :
                new ObjectParameter("VehicleStateID", typeof(int));

            var makeIDParameter = makeID.HasValue ?
                new ObjectParameter("MakeID", makeID) :
                new ObjectParameter("MakeID", typeof(int));

            var modelNameParameter = modelName != null ?
                new ObjectParameter("ModelName", modelName) :
                new ObjectParameter("ModelName", typeof(string));

            var vehicleColorIDParameter = vehicleColorID.HasValue ?
                new ObjectParameter("VehicleColorID", vehicleColorID) :
                new ObjectParameter("VehicleColorID", typeof(int));

            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));

            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));

            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<vms_UpdateVehicleInformation_Result>("vms_UpdateVehicleInformation", vehicleIDParameter, vehicleTypeIDParameter, licensePlateNoParameter, vehicleStateIDParameter, makeIDParameter, modelNameParameter, vehicleColorIDParameter, commentsParameter, modifiedByParameter, modifiedOnParameter);
        }
    }
}
